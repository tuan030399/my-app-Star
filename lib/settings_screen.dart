import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:qltinhoc/settings_service.dart';
import 'package:qltinhoc/gaming_widgets.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  late final TextEditingController _sheetIdController;
  late final TextEditingController _geminiKeyController;
  bool _isLoading = false;

  // Bi·∫øn m·ªõi ƒë·ªÉ qu·∫£n l√Ω th√¥ng tin file JSON
  String _jsonFileContent = '';
  String _jsonFileName = 'Ch∆∞a ch·ªçn file';

  @override
  void initState() {
    super.initState();
    // T·∫£i c√†i ƒë·∫∑t hi·ªán c√≥ v√†o c√°c √¥
    _sheetIdController = TextEditingController(text: SettingsService.sheetId);
    _geminiKeyController = TextEditingController(text: SettingsService.geminiKey);

    // Ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i c·ªßa file JSON ƒë√£ l∆∞u
    _jsonFileContent = SettingsService.gsheetJson;
    if (_jsonFileContent.isNotEmpty) {
      _jsonFileName = 'credentials.json (ƒë√£ c√≥)';
    }
  }

  @override
  void dispose() {
    _sheetIdController.dispose();
    _geminiKeyController.dispose();
    super.dispose();
  }



  // H√†m x·ª≠ l√Ω vi·ªác ch·ªçn v√† ƒë·ªçc file (c√°ch c≈©)
  Future<void> _pickJsonFile() async {
    try {
      // M·ªü tr√¨nh ch·ªçn file, ch·ªâ cho ph√©p ch·ªçn file c√≥ ƒëu√¥i .json
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['json'],
      );

      // N·∫øu ng∆∞·ªùi d√πng ch·ªçn m·ªôt file
      if (result != null && result.files.single.path != null) {
        final filePath = result.files.single.path!;
        final file = File(filePath);
        
        // ƒê·ªçc n·ªôi dung file d∆∞·ªõi d·∫°ng chu·ªói k√Ω t·ª±
        final fileContent = await file.readAsString();

        // C·∫≠p nh·∫≠t giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã t√™n file v√† l∆∞u n·ªôi dung
        setState(() {
          _jsonFileContent = fileContent;
          _jsonFileName = result.files.single.name;
        });
      } else {
        // Ng∆∞·ªùi d√πng ƒë√£ h·ªßy vi·ªác ch·ªçn file
        print('H·ªßy ch·ªçn file.');
      }
    } catch (e) {
      print("L·ªói khi ch·ªçn file: $e");
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu c√≥ s·ª± c·ªë
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('L·ªói khi ƒë·ªçc file: $e')),
        );
      }
    }
  }
  


  // H√†m l∆∞u t·∫•t c·∫£ c√†i ƒë·∫∑t (c√°ch c≈©)
  Future<void> _save() async {
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ch·ªçn file JSON ch∆∞a (n·∫øu tr∆∞·ªõc ƒë√≥ ch∆∞a c√≥)
    if (_jsonFileContent.isEmpty) {
       ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Vui l√≤ng ch·ªçn file credentials.json!')),
        );
       return;
    }

    setState(() { _isLoading = true; });

    // G·ªçi service ƒë·ªÉ l∆∞u t·∫•t c·∫£ d·ªØ li·ªáu
    await SettingsService.saveSettings(
      newSheetId: _sheetIdController.text.trim(),
      newGeminiKey: _geminiKeyController.text.trim(),
      newGsheetJson: _jsonFileContent.trim(),
    );

    // C·∫ßn ph·∫£i kh·ªüi t·∫°o l·∫°i Google Sheets API v·ªõi th√¥ng tin m·ªõi
    // GoogleSheetsApi.init(); // <- T·∫°m th·ªùi v√¥ hi·ªáu h√≥a, s·∫Ω kh·ªüi t·∫°o khi c·∫ßn

    if (mounted) {
      setState(() { _isLoading = false; });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('ƒê√£ l∆∞u c√†i ƒë·∫∑t! ·ª®ng d·ª•ng s·∫Ω s·ª≠ d·ª•ng c√†i ƒë·∫∑t m·ªõi ·ªü l·∫ßn l√†m m·ªõi ti·∫øp theo.')),
      );
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          '‚öôÔ∏è C√ÄI ƒê·∫∂T H·ªÜ TH·ªêNG',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            shadows: [
              Shadow(blurRadius: 10.0, color: Colors.cyan, offset: Offset(0, 0)),
              Shadow(blurRadius: 20.0, color: Colors.purple, offset: Offset(0, 0)),
            ],
          ),
        ),
        centerTitle: true,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Colors.deepPurple.shade900, Colors.blue.shade900],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      body: _isLoading
          ? const Center(
              child: GamingLoadingWidget(
                size: 80,
                type: 'neon',
                primaryColor: Colors.cyan,
                secondaryColor: Colors.purple,
              ),
            )
          : Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    Colors.black,
                    Colors.deepPurple.shade900.withOpacity(0.3),
                    Colors.black,
                  ],
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                ),
              ),
              child: ListView(
              padding: const EdgeInsets.all(16.0),
              children: [
                // Gaming Header
                Container(
                  padding: const EdgeInsets.all(20),
                  margin: const EdgeInsets.only(bottom: 24),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        Colors.cyan.withOpacity(0.2),
                        Colors.purple.withOpacity(0.2),
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: Colors.cyan.withOpacity(0.5),
                      width: 2,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.cyan.withOpacity(0.3),
                        blurRadius: 15,
                        spreadRadius: 2,
                      ),
                    ],
                  ),
                  child: const Column(
                    children: [
                      Icon(
                        Icons.settings_applications,
                        size: 48,
                        color: Colors.cyan,
                        shadows: [
                          Shadow(blurRadius: 10, color: Colors.cyan),
                        ],
                      ),
                      SizedBox(height: 12),
                      Text(
                        'C·∫§U H√åNH H·ªÜ TH·ªêNG',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                          shadows: [
                            Shadow(blurRadius: 5, color: Colors.cyan),
                            Shadow(blurRadius: 10, color: Colors.purple),
                          ],
                        ),
                      ),
                      SizedBox(height: 8),
                      Text(
                        'C·∫•u h√¨nh h·ªá th·ªëng ƒë·ªÉ k·∫øt n·ªëi v·ªõi Google Sheets v√† AI',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),

                // Gaming Input Fields
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: Colors.cyan.withOpacity(0.3),
                      width: 1,
                    ),
                  ),
                  child: Column(
                    children: [
                      TextField(
                        controller: _sheetIdController,
                        style: const TextStyle(color: Colors.white),
                        decoration: InputDecoration(
                          labelText: 'üîó ID Google Sheet',
                          labelStyle: const TextStyle(
                            color: Colors.cyan,
                            fontWeight: FontWeight.bold,
                          ),
                          hintText: 'D√°n ID sheet c·ªßa b·∫°n v√†o ƒë√¢y',
                          hintStyle: TextStyle(color: Colors.grey.shade400),
                          prefixIcon: const Icon(Icons.table_chart, color: Colors.cyan),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.cyan),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(color: Colors.cyan.withOpacity(0.5)),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.cyan, width: 2),
                          ),
                          filled: true,
                          fillColor: Colors.black.withOpacity(0.2),
                        ),
                      ),
                      const SizedBox(height: 16),
                      TextField(
                        controller: _geminiKeyController,
                        style: const TextStyle(color: Colors.white),
                        decoration: InputDecoration(
                          labelText: 'ü§ñ API Key c·ªßa Gemini',
                          labelStyle: const TextStyle(
                            color: Colors.purple,
                            fontWeight: FontWeight.bold,
                          ),
                          hintText: 'D√°n API key c·ªßa Gemini v√†o ƒë√¢y',
                          hintStyle: TextStyle(color: Colors.grey.shade400),
                          prefixIcon: const Icon(Icons.smart_toy, color: Colors.purple),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.purple),
                          ),
                          enabledBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: BorderSide(color: Colors.purple.withOpacity(0.5)),
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(12),
                            borderSide: const BorderSide(color: Colors.purple, width: 2),
                          ),
                          filled: true,
                          fillColor: Colors.black.withOpacity(0.2),
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 20),

                // KH·ªêI CH·ªåN FILE JSON M·ªöI
                Text(
                  'File Google Credentials (.json)',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.shade400),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      // Hi·ªÉn th·ªã t√™n file, c√≥ th·ªÉ b·ªã c·∫Øt n·∫øu qu√° d√†i
                      Expanded(
                        child: Text(
                          _jsonFileName,
                          style: TextStyle(
                            color: _jsonFileName.startsWith('Ch∆∞a') ? Colors.red : Colors.green.shade800,
                            fontStyle: FontStyle.italic,
                          ),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      const SizedBox(width: 10),
                      // N√∫t b·∫•m ƒë·ªÉ m·ªü tr√¨nh ch·ªçn file
                      ElevatedButton.icon(
                        icon: const Icon(Icons.folder_open),
                        onPressed: _pickJsonFile,
                        label: const Text('Ch·ªçn File...'),
                      )
                    ],
                  ),
                ),
                // --- K·∫æT TH√öC KH·ªêI M·ªöI ---
                
                const SizedBox(height: 32),
                // N√∫t L∆∞u C√†i ƒê·∫∑t
                // Gaming Save Button
                Center(
                  child: GamingButton(
                    text: 'L∆ØU C√ÄI ƒê·∫∂T',
                    icon: Icons.save,
                    onPressed: _save,
                    width: 250,
                    height: 60,
                    primaryColor: Colors.green,
                    secondaryColor: Colors.cyan,
                  ),
                ),
              ],
            ),
          ),
    );
  }
}